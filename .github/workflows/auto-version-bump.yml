name: Auto Version Bump & Release

on:
  push:
    branches:
      - patch
      - minor
      - major
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type (patch/minor/major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  check-conditions:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      version_type: ${{ steps.check.outputs.version_type }}
    steps:
      - name: Check conditions
        id: check
        run: |
          # Skip if commit is from GitHub Actions or already contains a version bump
          if [[ "${{ github.event.head_commit.message }}" == *"🔖 Release"* ]] || \
             [[ "${{ github.event.head_commit.message }}" == *"Version bump"* ]] || \
             [[ "${{ github.actor }}" == "github-actions[bot]" ]]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "Skipping version bump - triggered by automated commit"
          else
            echo "should_run=true" >> $GITHUB_OUTPUT
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "version_type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
            else
              echo "version_type=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
            fi
            echo "Proceeding with version bump"
          fi

  bump-version:
    needs: check-conditions
    if: needs.check-conditions.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}
          # Required for creating pull request
          ref: ${{ github.head_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci
          if [ $? -ne 0 ]; then
            echo "::error::Failed to install dependencies"
            exit 1
          fi

      - name: Run Tests
        run: |
          echo "Running linting checks in CI environment..."
          npm test
          if [ $? -ne 0 ]; then
            echo "::warning::Tests failed but continuing with version bump"
          fi

      - name: Calculate New Version
        id: version
        run: |
          CURRENT_VERSION=$(jq -r .version package.json)
          if [ -z "$CURRENT_VERSION" ]; then
            echo "::error::Could not determine current version"
            exit 1
          fi
          
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          case "${{ needs.check-conditions.outputs.version_type }}" in
            patch)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
            minor)
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            *)
              echo "::error::Invalid version type"
              exit 1
              ;;
          esac
          
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update Files
        run: |
          # Update CHANGELOG.md
          DATE=$(date +%Y-%m-%d)
          TEMP_FILE=$(mktemp)
          echo -e "## [${{ steps.version.outputs.new_version }}] - ${DATE}\n" > "$TEMP_FILE"
          cat CHANGELOG.md >> "$TEMP_FILE"
          mv "$TEMP_FILE" CHANGELOG.md
          
          # Update package.json
          jq ".version = \"${{ steps.version.outputs.new_version }}\"" package.json > temp.json && mv temp.json package.json
          
          # Verify updates
          if ! grep -q "${{ steps.version.outputs.new_version }}" CHANGELOG.md || \
             ! grep -q "\"version\": \"${{ steps.version.outputs.new_version }}\"" package.json; then
            echo "::error::Failed to update version in files"
            exit 1
          fi

      - name: Create Release Branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          BRANCH_NAME="release/v${{ steps.version.outputs.new_version }}"
          git checkout -b "$BRANCH_NAME"
          git add package.json CHANGELOG.md
          git commit -m "🔖 Version bump to v${{ steps.version.outputs.new_version }}"
          git push origin "$BRANCH_NAME"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GH_PAT }}
          commit-message: "🔖 Version bump to v${{ steps.version.outputs.new_version }}"
          title: "🔖 Release v${{ steps.version.outputs.new_version }}"
          body: |
            # Version Bump to v${{ steps.version.outputs.new_version }}
            
            This PR was automatically created by the version bump workflow.
            
            ## Changes
            - ⬆️ Bumped version from v${{ steps.version.outputs.current_version }} to v${{ steps.version.outputs.new_version }}
            - 📝 Updated CHANGELOG.md
            - 📦 Updated package.json
            
            ## Type of Update
            - Type: `${{ needs.check-conditions.outputs.version_type }}`
            
            ## Checklist
            - [ ] Review version bump changes
            - [ ] Check CHANGELOG.md updates
            - [ ] Verify package.json version
            
            > Note: Merging this PR will trigger the release workflow.
          branch: "release/v${{ steps.version.outputs.new_version }}"
          base: main
          labels: |
            release
            automated-pr
          delete-branch: true

      - name: Create Git Tag
        run: |
          git tag "v${{ steps.version.outputs.new_version }}"
          git push origin "v${{ steps.version.outputs.new_version }}"
